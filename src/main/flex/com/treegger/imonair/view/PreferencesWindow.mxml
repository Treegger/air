<?xml version="1.0" encoding="utf-8"?>
<s:Window 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	transparent="false"
	systemChrome="standard"
	title="{resourceManager.getString('imonair', 'preferencesWindowTitle')}"
	maximizable="false"
	resizable="false"
	type="normal"
	showStatusBar="false"
	alwaysInFront="true"
	creationComplete="creationCompleteHandler(event)"
	height="200" width="320"
	>
	
	<fx:Metadata>
		[ResourceBundle("imonair")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.treegger.imonair.controller.ChatController;
			import com.treegger.imonair.controller.ChatEvent;
			import com.treegger.imonair.controller.PreferencesController;
			import com.treegger.imonair.model.UserAccount;
			import com.treegger.imonair.model.UserPreference;
			import com.treegger.protobuf.AuthenticateResponse;
			import com.treegger.util.FileSerializer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			

			
			[Inject]
			public var chatController:ChatController;

			[Inject]
			public var preferenceController:PreferencesController;
			
			[Bindable]
			private var userAccount:UserAccount;
			
			[Bindable]
			private var userPreference:UserPreference;
			
			private var accountChanged:Boolean=false;
			
			private function creationCompleteHandler(event:Event):void
			{
				userAccount = preferenceController.userAccount;
				if( !userAccount ) userAccount = new UserAccount();
				userPreference = preferenceController.userPreference;
			}
			
			private function saveHandler( event:Event):void
			{
				userPreference.startAtLogin = startAtLoginInput.selected;
				try 
				{ 
					NativeApplication.nativeApplication.startAtLogin = userPreference.startAtLogin; 
				}
				catch ( e:Error ) 
				{ 
					trace( "Cannot set startAtLogin: " + e.message ); 
				} 

				preferenceController.userPreference = userPreference;

				if( accountChanged )
				{
					currentState = "disabled";
					
					const currentUserAccount:UserAccount = new UserAccount();
					currentUserAccount.socialNetwork = socialNetworkInput.selectedItem;
					currentUserAccount.username = usernameInput.text;
					currentUserAccount.password = passwordInput.text
					preferenceController.userAccount = currentUserAccount;
					
					chatController.addEventListener( ChatEvent.AUTHENTICATION, authenticationHandler );
					chatController.disconnect( true );
					chatController.connect();
					chatController.authenticate( currentUserAccount );
				}
				else
				{
					close();
				}
			}
			
			private function authenticationHandler( event:ChatEvent ):void
			{
				chatController.removeEventListener( ChatEvent.AUTHENTICATION, authenticationHandler );

				currentState = "normal";
				accountChanged=false;
				
				if( chatController.authenticated )
				{
					close();
				}
				else
				{
					Alert.show( "Wrong username or password", "Unable to authenticate", mx.controls.Alert.OK, mainGroup );
				}
			}
			
			private function getValue( value:String, defaultValue:String ):String
			{
				if( !value ) return defaultValue;
				return value;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>

	
	<s:VGroup id="mainGroup" horizontalCenter="0" verticalCenter="0" enabled="true" enabled.disabled="false" >
		<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="30">
			<s:Label text="Account settings" fontSize="16" fontWeight="bold"/>
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label width="100" text="{resourceManager.getString('imonair', 'preferencesSocialNetwork' )}" fontWeight="bold" />
			<s:ComboBox id="socialNetworkInput" width="100%" selectedIndex="0"
						dataProvider="{new ArrayCollection(['Twitter','Foursquare'])}" 
						selectedItem="{getValue( userAccount.socialNetwork, 'Twitter' )}"
						change="accountChanged=true"
			/>
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label width="100" text="{resourceManager.getString('imonair', 'preferencesUsername' )}" fontWeight="bold" />
			<s:TextInput id="usernameInput" width="100%" text="{userAccount.username}" change="accountChanged=true" enter="saveHandler( event )"
						 editable="true" editable.disabled="false"/>
		</s:HGroup>
		
		
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label width="100"  text="{resourceManager.getString('imonair', 'preferencesPassword')}" fontWeight="bold"/>
			<s:TextInput id="passwordInput"  width="100%" displayAsPassword="true" 
						 text="{userAccount.password}" 
						 change="accountChanged=true"
						 enter="saveHandler( event )"
						 editable="true" editable.disabled="false"/>
		</s:HGroup>

		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label width="100"  text="{resourceManager.getString('imonair', 'preferencesStartAtLogin')}" fontWeight="bold"/>
			<s:CheckBox id="startAtLoginInput" selected="{userPreference.startAtLogin}" />
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Group width="100"/>
			<s:Button label="Save" click="saveHandler( event )" />
		</s:HGroup>
		
		
	</s:VGroup>
	
</s:Window>
