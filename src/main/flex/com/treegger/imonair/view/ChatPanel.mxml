<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		gap="2"
		width="100%"
		height="100%"
		creationComplete="creationComplete()"
		show="showHandler()" xmlns:view="com.treegger.imonair.view.*"
		 >
	<fx:Script>
		<![CDATA[
			import com.treegger.imonair.controller.ChatController;
			import com.treegger.imonair.model.ChatContent;
			import com.treegger.imonair.model.Contact;
			import com.treegger.protobuf.TextMessage;
			
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			import org.swizframework.core.SwizManager;
			
			import spark.components.Label;

			
			private var _chatController:ChatController;
			[Inject]
			public function set chatController(value:ChatController):void
			{
				_chatController = value;
			}
			public function get chatController():ChatController
			{
				return _chatController;
			}
			
			
			private var _contact:Contact;
			public function set contact(value:Contact):void
			{
				_contact = value;
				
				if( !contact.vCardFetched ) chatController.requestVCard( contact ); 
				
				_contact.chatContents.addEventListener(CollectionEvent.COLLECTION_CHANGE, function(event:CollectionEvent):void
				{
					if( event.kind == CollectionEventKind.ADD )
					{
						for each( var chatContent:ChatContent in event.items )
						{
							pushContent( chatContent );
						}
					}
				});
			}
			public function get contact():Contact
			{
				return _contact;
			}
			
			
			private var fileManager:P2PFileManager;
			public function requestDownloadFile():void
			{
				if( fileManager == null )
				{
					fileManager = new P2PFileManager();
					SwizManager.setUp( fileManager );
					fileManager.contact = contact;
					addElement( fileManager );
				}				
			}
			public function selectFile():void
			{
				if( fileManager == null )
				{
					fileManager = new P2PFileManager();
					SwizManager.setUp( fileManager );
					fileManager.contact = contact;
					addElement( fileManager );
				}
				fileManager.selectFile();
			}
			
			private function showHandler():void
			{
				if( initialized ) callLater( focusText );
			}
			
			private function focusText():void
			{
				if( textInput ) textInput.setFocus();
			}

			
			private function creationComplete():void
			{
				composingTimer = new Timer( 5*1000 );
				composingTimer.addEventListener(TimerEvent.TIMER_COMPLETE, pauseCompose );

				//callLater( focusText );
				for each( var chatContent:ChatContent in _contact.chatContents )
				{
					pushContent( chatContent );
				}
				
				if( _dropText )
				{
					textInput.text += _dropText;
					_dropText = null;
				}
			}
			
			private var lastChatItem:ChatItem;
			
			
			private function toXML( s:String ):String
			{
				return s.replace( /&/g, "&amp;" ).replace( /</g, "&lt;" ).replace( />/g, "&gt;" ).replace( /\'/g, "&apos;" ).replace( /\"/g, "&quot;" );
			}
			private function fromXML( s:String ):String
			{
				return s.replace( /&lt;/g, "<"  ).replace( /&gt;/g, ">" ).replace( /&apos;/g, "'" ).replace( /&quot;/g, "\""  ).replace( /&amp;/g, "&"  );
			}
			
			private function pushContent( chatContent:ChatContent ):void
			{
				if( lastChatItem == null || lastChatItem.title != chatContent.from )
				{
						lastChatItem = new ChatItem();
						lastChatItem.title = chatContent.from;
						lastChatItem.titleColor = 0xffffff;
						lastChatItem.color = 0x000000;
						
						if( chatContent.from == contact.name )
						{
							lastChatItem.photoURL = contact.photoURL;
							lastChatItem.backgroundColor = 0xFF7B00;
						}
						else
						{
							lastChatItem.photoURL = chatController.currentContact.photoURL;
							lastChatItem.backgroundColor = 0x8E91B7;
						}
						
						lastChatItem.percentWidth = 100;
						areaInput.addElement( lastChatItem );
						
						lastChatItem.addEventListener(Event.ADDED, updateScrolling );
						lastChatItem.textGroup.addEventListener(Event.RESIZE, updateScrolling );
				}
				
				
				lastChatItem.addText( chatContent.message, chatContent.time );
				
			}
			
			
			private function updateScrolling( event:Event ):void
			{
				if( event.currentTarget is ChatItem ) (event.currentTarget as ChatItem).removeEventListener(Event.ADDED, updateScrolling );
				scrollingAnimation.play();
			}
			
			
			private function enterHandler( event:Event ):void
			{
				if( textInput.text )
				{
					const text:String = textInput.text;
					chatController.sendTextMessage( contact.jidWithoutRessource, toXML( text ) , null );
					const chatContent:ChatContent = new ChatContent();
					chatContent.from = chatController.currentContact.name;
					chatContent.message = text;
					chatContent.read = true;
					chatContent.time = new Date();
					contact.chatContents.addItem( chatContent );
					textInput.text = "";
				}
				composing = false;
				composingTimer.reset();
			}
			
			
			private var _dropText:String;
			public function dropText( text:String ):void
			{
				if( initialized ) textInput.text += text;
				else _dropText = text;
				callLater( focusText );

			}
			
			private function dragEnterHandler(e:NativeDragEvent):void 
			{
				if (e.clipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)) {
					NativeDragManager.acceptDragDrop(textInput);
				}
			}
			
			private function dropHandler(e:NativeDragEvent):void 
			{
				trace( "Drop " + e );
				dropText( e.clipboard.getData(ClipboardFormats.TEXT_FORMAT) as String );
			}
			
			private var composing:Boolean;
			private var composingTimer:Timer;
			private function compose( event:KeyboardEvent ):void
			{
				if( !event.ctrlKey && !event.altKey )
				{
					if( textInput.text )
					{
						if( !composing && event.keyCode != 13 )
						{
							trace( "Composing...." );
							composing = true;
							chatController.sendStateNotificationMessage( contact.jidWithoutRessource, true, false, false, false );
						}
						if( composingTimer )
						{
							trace( "ResetTimer" );
							composingTimer.reset();
							composingTimer.repeatCount = 1;
							composingTimer.start();
						}
					}
					else
					{
						trace( "Stoped Composing" );
						composing = false;
						//composing:Boolean, paused:Boolean, active:Boolean, gone:Boolean 
						chatController.sendStateNotificationMessage( contact.jidWithoutRessource, false, false, true, false );
					}
				}
			}

			private function pauseCompose(event:Event):void 
			{ 
				trace( "Paused" );
				composing = false;
				//composing:Boolean, paused:Boolean, active:Boolean, gone:Boolean 
				chatController.sendStateNotificationMessage( contact.jidWithoutRessource, false, true, false, false );
			} 
			public function leaveConversation():void
			{
				trace( "Leave" );
				composing = false;
				chatController.sendStateNotificationMessage( contact.jidWithoutRessource, false, false, false, true );				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Animate  id="scrollingAnimation" target="{areaInput}" duration="200">
			<s:SimpleMotionPath id="motionPath" valueTo="{areaInput.contentHeight - areaInput.height}" property="verticalScrollPosition" />
		</s:Animate>
	</fx:Declarations>
	
	
	<s:Group  height="100%" width="100%">
		<s:Rect height="100%" width="100%">
			<s:fill>
				<s:SolidColor color="0xffffff" alpha=".8" />
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0x000000" alpha=".3" />
			</s:stroke>
		</s:Rect>


		<s:Scroller id="scroller" height="100%" width="100%" >
			<s:VGroup id="areaInput"  paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
				<mx:Spacer height="100%"/>
			</s:VGroup>
		</s:Scroller>
	</s:Group>
	
	
	<s:TextInput id="textInput" width="100%" focusEnabled="true"
				 keyDown="compose( event )"
				 enter="enterHandler( event )"
				 nativeDragEnter="dragEnterHandler(event)" 
				 nativeDragDrop="dropHandler(event)"
				 focusIn="textInput.selectRange( textInput.text.length, textInput.text.length)"
				 
				 />
</s:VGroup>
