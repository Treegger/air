<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:view="com.treegger.imonair.view.*" 
	xmlns:component="com.treegger.component.*"
	
	autoDrawBackground="false" 
	doubleClickEnabled="true"
	doubleClick="doubleClickHandler()" 
	nativeDragEnter="dragEnterHandler(event)"
	nativeDragExit="dragExitHandler(event)"
	nativeDragDrop="dropHandler(event)"
	
	rollOver="rollOverHandler()"
	rollOut="rollOutHandler()"
	
	creationComplete="creationCompleteHandler()"
>
	
	<fx:Script>
		<![CDATA[
			import com.treegger.imonair.model.Contact;
			import com.treegger.protobuf.RosterItem;
			
			import flash.utils.setTimeout;
			
			import mx.events.DynamicEvent;

			
			private function doubleClickHandler():void
			{
				const event:DynamicEvent = new DynamicEvent( "contactDoubleClick", true );
				event.contact = data;
				dispatchEvent( event ); 
			}

			private function rollOverHandler():void
			{
				const event:DynamicEvent = new DynamicEvent( "rollOverItem", true );
				event.contact = data;
				dispatchEvent( event ); 
			}
			private function rollOutHandler():void
			{
				const event:DynamicEvent = new DynamicEvent( "rollOutItem", true );
				event.contact = data;
				dispatchEvent( event ); 
			}
			
			private function dragEnterHandler(e:NativeDragEvent):void 
			{
				if (e.clipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)) {
					NativeDragManager.acceptDragDrop(this);
					currentState = "dragHovered";
				}
			}
			private function dragExitHandler(e:NativeDragEvent ):void
			{
				if( currentState == "dragHovered" ) currentState = "normal";
			}
			
			private function dropHandler(e:NativeDragEvent):void 
			{
				trace( "Drop " + e );
				const event:DynamicEvent = new DynamicEvent( "dropText", true );
				event.contact = data;
				event.text = e.clipboard.getData(ClipboardFormats.TEXT_FORMAT) as String;
				dispatchEvent( event ); 
			}

			private function creationCompleteHandler():void
			{
				currentState = "added";
				setTimeout( stateToNormal, 3000 );
			}
			private function stateToNormal():void
			{
				currentState = "normal";
			}
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>

	<s:states>
		<s:State name="normal" />
		<s:State name="added" />
		<s:State name="hovered" />
		<s:State name="dragHovered" />
	</s:states>
	
	<s:Group id="group">
		<s:Rect  top="0" bottom="0" radiusX="8" radiusY="8"  width="100%">
			<s:fill>
				<s:SolidColor color="0xffffff" color.dragHovered="0x6677C1" color.added="0x00aa00"  alpha="1" alpha.added="0.6" alpha.hovered="0.9" alpha.dragHovered="0.8"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0x000000" color.dragHovered="0x0B2DC1" alpha=".3" alpha.hovered="0.1" alpha.dragHovered=".8" weight="1" weight.dragHovered="3"/>
			</s:stroke>
		</s:Rect>

		<component:StatusBullet left="5" top="3" width="10" height="10" color="{( data as Contact ).statusColor}" closable="false"/>
			
		
		<s:Label text="{(data as Contact).name}" top="3" bottom="1" left="19" right="5" color.dragHovered="0xffffff" color.added="0xffffff"/>
		
	</s:Group>
</s:ItemRenderer> 
