<?xml version="1.0" encoding="utf-8"?>
<s:Window 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:component="com.treegger.component.*"
	
	transparent="false"
	systemChrome="standard"
	maximizable="true"
	resizable="true"
	type="normal"
	showStatusBar="false"
	close="closeHandler()"
	height="{cameraHeight}" width="{cameraWidth}"
	title="{contact.name}" 
	backgroundColor="0x000000"
	
	creationComplete="creationCompleteHandler()"
>
	<fx:Metadata>
		[ResourceBundle("imonair")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.treegger.imonair.PrivateProperties;
			import com.treegger.imonair.controller.ChatController;
			import com.treegger.imonair.controller.ChatEvent;
			import com.treegger.imonair.model.Contact;
			import com.treegger.component.AlphaButton;
			import com.treegger.component.IOStream;
			import com.treegger.component.StratusConnector;
			
			import flash.media.Camera;
			import flash.net.sendToURL;
			import flash.utils.setTimeout;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import org.swizframework.reflection.BindableMetadataHost;
			

			
			[Inject]
			public var chatController:ChatController;
			
			
			private const cameraWidth:int=320;
			private const cameraHeight:int=240;
			
			private var remoteVideo:Video = new Video();


			
			[Bindable]
			public var contact:Contact;
			
			
			private var ioStream:IOStream;

			private var _stratusConnector:StratusConnector;
			[Inject]
			public function set stratusConnector(value:StratusConnector):void
			{
				_stratusConnector = value;
				var that:UIComponent = this;
				_stratusConnector.addEventListener( "requestVideo_"+contact.jidWithoutRessource, requestVideoHandler );
			}

			private function requestVideoHandler( event:DynamicEvent ):void
			{
				if( initialized ) requestVideo();
				else 
				{
					addEventListener(FlexEvent.CREATION_COMPLETE, function(event:Event):void{Â requestVideo() } );
				}
			}
			
			public function startStratus():void
			{
				var that:VideoWindow = this;
				_stratusConnector.connect( contact, function( contact:Contact, ioStream:IOStream ):void
				{
					that.ioStream = ioStream;
					startBroadCast(); 
				});

			}
			
			private function startBroadCast():void
			{
				ioStream.output.send( "remoteCall",  { remoteEvent: ChatEvent.STRATUSVIDEO } );
				attachVideo();
				ioStream.output.send( "remoteCall",  { remoteEvent: "requestVideo_"+chatController.currentContact.jidWithoutRessource } );
			}
			
			public function requestVideo():void
			{
				ring();
				activate();
				Alert.show( resourceManager.getString( 'imonair', 'videoRequestFrom', [contact.name]), resourceManager.getString( 'imonair', 'videoAccept' ),
						Alert.YES|Alert.NO, this, acceptRemoteClickHandler );
			}
			
			private function acceptRemoteClickHandler( event:CloseEvent ):void
			{
				stopRing();
				if( event.detail == Alert.YES )
				{
					var that:VideoWindow = this;
					_stratusConnector.connect( contact, function( contact:Contact, ioStream:IOStream ):void
					{
						that.ioStream = ioStream;
						attachVideo();
					});
				}
				else 
				{
					close();
				}
			}
			
			private function attachVideo():void
			{
				var st:SoundTransform = new SoundTransform(1);
				ioStream.input.soundTransform = st;
				
				remoteVideo.smoothing = true;
				remoteVideo.attachNetStream( ioStream.input );
				remoteVideoDisplay.addChild( remoteVideo );
				
				bindCamera();
				bindMicrophone();
			}

			private function closeHandler():void
			{
				_stratusConnector.removeEventListener( "requestVideo_"+contact.jidWithoutRessource, requestVideoHandler );

				localVideoDisplay.attachCamera(null);
				remoteVideoDisplay.attachCamera(null);
				if( ioStream && ioStream.output )
				{
					ioStream.output.attachCamera(null);
					ioStream.output.attachAudio(null);
				}
			}
			
			
			
			private function bindCamera():void
			{
				var camera:Camera = getCamera();
				if( camera )
				{
					if( buttonList.selectedItem == resourceManager.getString('imonair', 'high') )
					{
						camera.setMode( cameraWidth*2, cameraHeight*2, 25 );
						camera.setQuality( 0, 90 );
					}
					else if( buttonList.selectedItem == resourceManager.getString('imonair', 'normal') )
					{
						camera.setMode( cameraWidth, cameraHeight, 15 );
						camera.setQuality( 0, 90 );
					}
					else if( buttonList.selectedItem == resourceManager.getString('imonair', 'low') )
					{
						camera.setMode( cameraWidth/2, cameraHeight/2, 10 );
						camera.setQuality( 0, 90 );
					}
					localVideoDisplay.attachCamera(camera);
				}
				
				if( ioStream && ioStream.output ) ioStream.output.attachCamera(camera);
			}
			
			[Bindable]
			private var microphone:Microphone;
			private function bindMicrophone():void
			{
				microphone = getMicrophone();
				if( microphone )
				{
					microphone.codec = SoundCodec.SPEEX;
					microphone.framesPerPacket = 1;
					microphone.soundTransform = new SoundTransform(1);
					microphone.setSilenceLevel(0);
					microphone.gain = gainSlider.value;
					if( buttonList.selectedItem == resourceManager.getString('imonair', 'high') )
					{
						microphone.rate = 44;
						microphone.encodeQuality = 9;
					}
					else if( buttonList.selectedItem == resourceManager.getString('imonair', 'normal') )
					{
						microphone.rate = 22;
						microphone.encodeQuality = 9;
					}
					else if( buttonList.selectedItem == resourceManager.getString('imonair', 'low') )
					{
						microphone.rate = 11;
						microphone.encodeQuality = 7;
					}
				}
				
				if( ioStream && ioStream.output ) ioStream.output.attachAudio(microphone);
			}
			
			
			private function getMicrophone():Microphone
			{
				for( var i:int; i<Microphone.names.length; i++ )
				{
					var mic:Microphone = Microphone.getMicrophone( i );
					if( mic ) return mic;
				}
				return null;				
			}
			
			private function getCamera():Camera
			{
				for( var i:int=0; i<Camera.names.length; i++ )
				{
					var camera:Camera = Camera.getCamera( i.toString() );
					if( camera ) return camera;
				}
				return null;
			}
			
			private function qualityChangeHandler():void
			{
				bindCamera();
				bindMicrophone();
			}
			
			private function toggleFullscreen():void
			{
				if( nativeWindow.stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE )
				{
					nativeWindow.stage.displayState = StageDisplayState.NORMAL;
				}
				else
				{
					nativeWindow.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}
			}
			
			
			private var ringer:Sound;
			private var ringerChannel:SoundChannel;
			

			private function ring():void
			{				
				if( ringer ) stopRing();
				ringer = new Sound();
				
				ringer.addEventListener("sampleData", ringTone);
				ringerChannel = ringer.play();
			}
			
			private function stopRing():void
			{
				if (ringerChannel)
				{
					ringerChannel.stop();
					
					ringer.removeEventListener("sampleData", ringTone);
					
					ringer = null;
					ringerChannel = null;
				}
			}
			
			private function ringTone(event:SampleDataEvent):void
			{	
				for (var c:int=0; c<8192; c++) 
				{
					var pos:Number = Number(c + event.position) / Number(6 * 44100);
					var frac:Number = pos - int(pos);
					var sample:Number;
					if (frac < 0.066)
					{
						sample = 0.4 * Math.sin(2* Math.PI / (44100/784) * (Number(c + event.position)));
					}
					else if (frac < 0.333)
					{
						sample = 0.2 * (Math.sin(2* Math.PI / (44100/646) * (Number(c + event.position)))
							+ Math.sin(2* Math.PI / (44100/672) * (Number(c + event.position)))
							+ Math.sin(2* Math.PI / (44100/1034) * (Number(c + event.position)))
							+ Math.sin(2* Math.PI / (44100/1060) * (Number(c + event.position))));
					}
					else
					{
						sample = 0;	
					}
					event.data.writeFloat(sample);
					event.data.writeFloat(sample);
				}
			}
			
			
			private function creationCompleteHandler():void
			{
				addEventListener(Event.ENTER_FRAME, updateMicrophoneActivity );
				const array:Array = [ resourceManager.getString('imonair', 'low'), resourceManager.getString('imonair', 'normal'), resourceManager.getString('imonair', 'high') ]
				buttonList.dataProvider = new ArrayCollection( array ); 
				buttonList.selectedIndex=1;
			}
			
			private function updateMicrophoneActivity(event:Event):void
			{
				if( microphone && microphone.activityLevel >= 0 )
				{
					microphoneActivityBar.height = Math.min( remoteVideoDisplay.height*microphone.activityLevel/400, localVideoDisplay.height);
				}
			}
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<mx:VideoDisplay id="remoteVideoDisplay" height="100%" width="{remoteVideoDisplay.height*4/3}" horizontalCenter="0" 
						 resize="remoteVideo.width=remoteVideoDisplay.width; remoteVideo.height=remoteVideoDisplay.height"/>
		<s:Group right="0" bottom="0">
			<mx:VideoDisplay id="localVideoDisplay" height="{remoteVideoDisplay.height/4}" width="{remoteVideoDisplay.width/4}" />		
			<s:Rect id="microphoneActivityBar" bottom="0" right="0" width="4" height="0">
				<s:fill>
					<s:SolidColor color="0xff0000" alpha="0.6" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="0xaa0000" alpha=".8" weight="1"/>
				</s:stroke>
			</s:Rect>

		</s:Group>
		
		<component:AlphaButton id="fullscreenButton" data="{resourceManager.getString('imonair', 'fullScreen')}" top="1" click="toggleFullscreen()"/>
		
		<s:VGroup right="0" top="0" horizontalAlign="right">
			<s:List id="buttonList"
					allowMultipleSelection="false"
					dragEnabled="false"
					dragMoveEnabled="false"
					dropEnabled="false"
					borderVisible="true"
					contentBackgroundAlpha="0"
					itemRenderer="com.treegger.component.AlphaButton"
					change="qualityChangeHandler()"
					>
				<s:layout>
					<s:HorizontalLayout  horizontalAlign="left" gap="1" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"/>
				</s:layout>
			</s:List>
	
			<s:HGroup gap="2" verticalAlign="middle" paddingRight="5">
				<s:Label text="{resourceManager.getString('imonair', 'mic')}" color="0xffffff" alpha=".5" fontSize="10"/>
				<s:HSlider id="gainSlider" alpha=".5" minimum="0" maximum="100" value="75" stepSize="5" snapInterval="5" liveDragging="true" showDataTip="false"
						   lineHeight="1" lineThrough="false" maxWidth="50"
						   change="if( microphone ) microphone.gain = gainSlider.value"/>
			</s:HGroup>

		</s:VGroup>
			
	</s:Group>
</s:Window>
