<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 
		 
		 mouseMove="mouseMoveHandler()"
		 mouseDown="rollOutItemHandler(event)"
		 rightMouseDown="rollOutItemHandler(event)"
		 creationComplete="creationCompleteHandler()" xmlns:view="com.treegger.imonair.view.*"
	 >
	
	<fx:Metadata>
		[ResourceBundle("imonair")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.treegger.imonair.controller.ChatController;
			import com.treegger.imonair.controller.ChatEvent;
			import com.treegger.imonair.controller.PreferencesController;
			import com.treegger.imonair.model.Contact;
			import com.treegger.component.Notification;
			import com.treegger.protobuf.TextMessage;
			
			import flash.sampler.NewObjectSample;
			
			import mx.collections.ArrayCollection;
			import mx.core.mx_internal;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import org.swizframework.core.SwizManager;
			import org.swizframework.events.ChainEvent;
			
			import spark.components.Application;
			import spark.components.WindowedApplication;
			

			[Inject]
			public var preferenceController:PreferencesController;

			[Inject]
			public var dockNotifier:DockNotifier;

			private var _chatController:ChatController;
			
			[Inject][Bindable]
			public function set chatController( value:ChatController ):void
			{
				_chatController = value;

				
				_chatController.addEventListener( ChatEvent.HANDSHAKED, authenticate )
				
				_chatController.addEventListener( ChatEvent.UNREAD_CONTENTS_CHANGE, function( event:ChatEvent ):void
				{
					callLater( dockNotify );
				});
				
					
				_chatController.addEventListener( ChatEvent.TEXTMESSAGE, function( event:ChatEvent ):void
				{
					
					var chatWindowAllReadyOpen:Boolean = chatWindow != null && chatWindow.activated;
					const chatWindow:ChatWindow = openChatWindowForContact( event.targetContact, false );
					
					if( chatWindow.selectedContact == event.targetContact && chatWindowAllReadyOpen )
					{
						chatWindow.selectedContact.setAllContentRead();
					}
					
					if( NativeWindow.supportsNotification )
					{
						chatWindow.nativeWindow.notifyUser( NotificationType.CRITICAL );
					}
				});
				_chatController.addEventListener( ChatEvent.STRATUSVIDEO, function( event:ChatEvent ):void
				{
					const chatWindow:ChatWindow = openChatWindowForContact( event.targetContact, false );
					chatWindow.openVideoWindow();
					dockNotifier.bounce( NotificationType.CRITICAL );
				});
				
				_chatController.addEventListener( ChatEvent.STRATUSFILE, function( event:ChatEvent ):void
				{
					const chatWindow:ChatWindow = openChatWindowForContact( event.targetContact, false );
					if( chatWindow.currentChatPannel ) chatWindow.currentChatPannel.requestDownloadFile();
					else chatWindow.addEventListener( FlexEvent.CREATION_COMPLETE, function( event:Event ):void {
						chatWindow.currentChatPannel.requestDownloadFile();
					});
					dockNotifier.bounce( NotificationType.CRITICAL );
				});
				
				_chatController.addEventListener( ChatEvent.ROSTER, function( event:ChatEvent ):void
				{
					rosterGroup.visible = true;
					rosterGroup.groupName = preferenceController.userAccount.socialNetwork;

					const timer:Timer = new Timer( 3*1000, 1 );
					timer.addEventListener(TimerEvent.TIMER, function( event:Event ):void
					{
						const onlineContacts:int = _chatController.onlineContacts.length;
						if( onlineContacts == 0 )
						{
							new Notification( resourceManager.getString('imonair', 'noneOnline' ), resourceManager.getString('imonair', 'maybeYouShould' ) );
						}
						else if( onlineContacts == 1 )
						{
							new Notification( resourceManager.getString('imonair', 'youHave', [ onlineContacts.toString()] ) );
						}
						else if( onlineContacts > 1 )
						{
							new Notification( resourceManager.getString( 'imonair', 'youHaves', [ onlineContacts.toString()] ) );
						}
					});
					timer.start();
				});
				

			}
			
			
			public function get chatController():ChatController
			{
				return _chatController;	
			}
			
			
			private function dockNotify():void
			{
				dockNotifier.notify( _chatController.unreadContents, NotificationType.INFORMATIONAL )
			}
			
			private function authenticate( event:ChatEvent ):void
			{
				if( preferenceController.userAccount && !chatController.authenticated )
				{
					new Notification( resourceManager.getString( 'imonair', 'authentication', [ preferenceController.userAccount.username, preferenceController.userAccount.socialNetwork] ), 
									resourceManager.getString( 'imonair', 'pleaseWait' ) );
					
					
					chatController.authenticate( preferenceController.userAccount );
				}
			}
			
			private var chatWindow:ChatWindow; 
			
			private function creationCompleteHandler():void
			{
				infoTimer = new Timer( 1000, 1 );
				infoTimer.addEventListener(TimerEvent.TIMER, infoWindowTimerHandler );

				
				rosterGroup.addEventListener( "contactDoubleClick", function( event:DynamicEvent ):void
				{
					const chatWindow:ChatWindow = openChatWindowForContact( event.contact, true );
					chatWindow.selectedContact = event.contact;
					chatWindow.nativeWindow.orderToFront();
					chatWindow.activate();
					event.stopPropagation();
				});
				rosterGroup.addEventListener( "dropText", function( event:DynamicEvent ):void
				{
					openChatWindowForContact( event.contact, true ).dropText( event.text );					
					event.stopPropagation();
				});
				
				rosterGroup.addEventListener( "rollOverItem", rollOverItemHandler );
				rosterGroup.addEventListener( "rollOutItem", rollOutItemHandler );
				
			}

			
			private function openChatWindowForContact( contact:Contact, activate:Boolean ):ChatWindow
			{
				if( !chatWindow )
				{
					chatWindow = new ChatWindow();
					chatWindow.addEventListener( Event.CLOSE, function( event:Event ):void{ chatWindow = null; } );
					SwizManager.setUp( chatWindow );
				}
				
				chatWindow.addChatContact( contact );
				chatWindow.open( activate );
				return chatWindow;
			}
			
			
			private var infoWindow:InfoWindow;
			private var infoTimer:Timer;
			
			private var rollOverContact:Contact;
			private function rollOverItemHandler( event:DynamicEvent ):void
			{
				rollOverContact = event.contact;
				if( !infoTimer.running )
				{
					if( !infoWindow )
					{
						infoTimer.reset();
						infoTimer.repeatCount = 1;
						infoTimer.start();
					}
					else
					{
						infoWindow.contact = rollOverContact;
						infoWindow.open( false );
						infoWindow.activate();
						infoWindow.showWindow();
						setInfoWindowPostion();
					}
				}
				
			}
			
			private function infoWindowTimerHandler(e:Event):void
			{
				infoWindow = new InfoWindow();
				SwizManager.setUp( infoWindow );
				infoWindow.addEventListener(Event.CLOSE, function( ce:Event ):void
				{
					infoWindow = null;
				});
				
				infoWindow.open( false );
				infoWindow.activate();
				infoWindow.contact = rollOverContact;
				setInfoWindowPostion();
				infoWindow.showWindow();
				infoWindow.orderToFront();
			}
			
			private function mouseMoveHandler( ):void
			{
				if( infoWindow && infoWindow.initialized && !infoWindow.closed )
				{
					setInfoWindowPostion();
				}
			}
			
			private function setInfoWindowPostion():void
			{
				var p:Point = stage.nativeWindow.globalToScreen( new Point( mouseX, mouseY ) );
				infoWindow.nativeX = p.x + 10;
				infoWindow.nativeY = p.y;
			}
			
			private function rollOutItemHandler( event:Event ):void
			{
				if( infoWindow && !infoWindow.closed )
				{
					infoWindow.hideWindow();
				}
				if( infoTimer.running ) infoTimer.stop();
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup>
		<view:RosterGroup id="rosterGroup" visible="false"/>
	</s:VGroup>

</s:Group>
