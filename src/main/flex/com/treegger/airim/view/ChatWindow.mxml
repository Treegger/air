<?xml version="1.0" encoding="utf-8"?>
<s:Window 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:component="com.treegger.component.*" 
		 xmlns:view="com.treegger.airim.view.*"
		 
		 
		 transparent="false"
		 systemChrome="standard"
		 maximizable="true"
		 resizable="true"
		 type="normal"
		 
		 showStatusBar="false"
		 width="640"
		 height="400"
		 
		 
		 creationComplete="creationCompleteHandler()"
		 windowActivate="windowActivateHandler()"
		 windowDeactivate="activated = false"
		 title="{getWindowTitle( selectedContact.name, selectedContact.unreadContents )}"
		 closing="closingHandler( event )"
		 keyDown="keyDownHanler( event )"
		 keyUp="keyUpHanler( event )"
		 >
	<fx:Metadata>
		[ResourceBundle("airim")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.treegger.airim.controller.ChatController;
			import com.treegger.airim.controller.PreferencesController;
			import com.treegger.airim.model.Contact;
			import com.treegger.airim.model.UserPreference;
			import com.treegger.component.TabEvent;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			import org.swizframework.core.SwizManager;
			import org.swizframework.core.mxml.Swiz;
			

			
			[Inject][Bindable]
			public var chatController:ChatController;

			[Inject]
			public var preferencesController:PreferencesController;
			
			[ArrayElementType("Contact")]
			[Bindable]
			private var activeChatContacts:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var selectedActiveChatContactIndex:int;
			
			
			public function addChatContact( contact:Contact ):void
			{
				if( !activeChatContacts.contains( contact ) )
				{
					activeChatContacts.addItem( contact );
					selectedContact = contact;
				}
			}
			
			private function updateChatContact( contact:Contact ):void
			{
				for each( var activeChatContact:Contact in activeChatContacts )
				{
					if( activeChatContact.jidWithoutRessource == contact.jidWithoutRessource )
					{
						activeChatContacts.setItemAt( contact, activeChatContacts.getItemIndex( activeChatContact ) );
						setChatPanel( contact, getChatPanel( activeChatContact ) );
						selectedContact = contact;
					}
				}
			}
			
			private function getWindowTitle( name:String, unreadContents:uint ):String
			{
				if( unreadContents > 0 ) return name + ' ('+unreadContents+')';
				else return name;
			}
			
			
			private const videoWindows:Object = {};

			public function openVideoWindow():VideoWindow
			{
				var videoWindow:VideoWindow = videoWindows[selectedContact.jidWithoutRessource]
				if( !videoWindow )
				{
					videoWindow = new VideoWindow();
					videoWindow.contact = selectedContact;
					videoWindows[selectedContact.jidWithoutRessource] = videoWindow;
					SwizManager.setUp( videoWindow );
					videoWindow.open(true);
					videoWindow.activate();
					videoWindow.addEventListener( Event.CLOSE,  closeVideoWindowHandler );
				}
				return videoWindow;
			}
		
			
			
			private function closingHandler( event:Event ):void
			{
				if( activeChatContacts.length > 0 )
				{
					tabCloseForContact( selectedContact );					
				}
				
				if( !chatController.exitState && ctrlKeyPressed )
				{
					if( activeChatContacts.length > 0 )
					{
						event.stopImmediatePropagation();
						event.preventDefault();
					}
				}
				
				if( !nativeWindow.closed &&  activeChatContacts.length == 0 )
				{
					const pref:UserPreference = preferencesController.userPreference;
					pref.chatWindowX = nativeWindow.x;
					pref.chatWindowY = nativeWindow.y;
					pref.chatWindowHeight = nativeWindow.height;
					pref.chatWindowWidth = nativeWindow.width;
					preferencesController.userPreference = pref;
				}
			}

			private var ctrlKeyPressed:Boolean = false;
			private function keyUpHanler( event:KeyboardEvent ):void
			{
				ctrlKeyPressed = false;
			}
			private function keyDownHanler( event:KeyboardEvent ):void
			{
				if( event.ctrlKey )
				{
					ctrlKeyPressed = true;
					if( event.keyCode == 37 || event.keyCode == 39 ) 
					{
						const i:int = activeChatContacts.getItemIndex( selectedContact );
						if( event.keyCode == 37 ) // arrow left 
						{
							selectedContact = activeChatContacts.getItemAt( ( i+1 )% activeChatContacts.length ) as Contact;
						} 					
						if( event.keyCode == 39 ) // arrow right 
						{
							selectedContact = activeChatContacts.getItemAt( ( i+activeChatContacts.length-1 )% activeChatContacts.length ) as Contact;						
						}
						event.stopImmediatePropagation();
						event.preventDefault();
					}
					
				}
			}
			
			private function closeVideoWindowHandler( event:Event ):void
			{
				var target:VideoWindow = event.currentTarget as VideoWindow;
				videoWindows[target.contact.jidWithoutRessource] = null;
				target.removeEventListener(Event.CLOSE, closeVideoWindowHandler );
			}
		
			private function tabCloseHandler( event:TabEvent ):void
			{
				tabCloseForContact( event.data as Contact );
			}
			private function tabCloseForContact( contact:Contact ):void
			{
				trace( "Tab Close for contact " +contact.name );
				getChatPanel( contact ).leaveConversation();

				const index:int = activeChatContacts.getItemIndex( contact );
				activeChatContacts.removeItemAt( index );
				if( activeChatContacts.length == 0 )
				{
					close();
				}
				else
				{
					if( index > 0 ) selectedContact = activeChatContacts.getItemAt( index - 1 ) as Contact;
					else selectedContact = activeChatContacts.getItemAt( index ) as Contact;
				}
			}
			
			private function tabClickHandler( event:TabEvent ):void
			{
				trace( "Tab Click for contact " +( event.data as Contact ).name );
				selectedContact = event.data as Contact;
			}
			
			
			private function tabDropTextHandler( event:TabEvent ):void
			{
				selectedContact = event.data as Contact;
				currentChatPannel.dropText( event.dropText );
			}
			
			private const chatPanels:Object = {};
			private function getChatPanel( contact:Contact ):ChatPanel
			{
				return chatPanels[contact.jidWithoutRessource] as ChatPanel
			}
			private function setChatPanel( contact:Contact, chatPanel:ChatPanel ):void
			{
				chatPanels[contact.jidWithoutRessource] = currentChatPannel;
			}
			
			[Bindable]
			public var currentChatPannel:ChatPanel;
			
			private var _selectedContact:Contact;
			[Bindable( event='selectedContactChanged' )]
			public function set selectedContact( contact:Contact ):void
			{
				_selectedContact = contact;
				selectedActiveChatContactIndex = activeChatContacts.getItemIndex( contact );
				
				if( initialized )
				{
					currentChatPannel = getChatPanel( contact );
					if( currentChatPannel == null )
					{
						currentChatPannel = new ChatPanel();
						SwizManager.setUp( currentChatPannel );
						currentChatPannel.contact = contact;
						setChatPanel( contact, currentChatPannel );
					}
					

					callLater( focusToCurrentPannel );
					
					
					if( _dropText )
					{
						currentChatPannel.dropText( _dropText );
						_dropText = null;
					}
					
					chatPanelStack.removeAllElements();
					chatPanelStack.addElement( currentChatPannel );
				}
				dispatchEvent( new Event( 'selectedContactChanged' ) );
			}
			public function get selectedContact():Contact 
			{ 
				return _selectedContact; 
			}
			
			private function focusToCurrentPannel():void
			{
				if( activated ) selectedContact.setAllContentRead();
				currentChatPannel.textInput.setFocus();
			}
			
			private var _dropText:String;
			public function dropText( text:String ):void
			{
				if( initialized )
				{
					currentChatPannel.dropText( text );
				}
				else _dropText = text;
			}

			public var activated:Boolean = false;
			private var preferencesSet:Boolean = false;
			private function windowActivateHandler():void
			{
				activated = true;
				callLater( focusToCurrentPannel );
				
				windowShowHandler();				
			}				
			
			private function windowShowHandler():void
			{
				if( !preferencesSet && preferencesController.hasUserPreference() )
				{
					preferencesSet = true;
					const pref:UserPreference = preferencesController.userPreference;
					if( pref.chatWindowX > 0 ) nativeWindow.x = pref.chatWindowX;
					if( pref.chatWindowY > 0 ) nativeWindow.y = pref.chatWindowY;
					if( pref.chatWindowHeight > 0 ) nativeWindow.height = pref.chatWindowHeight;
					if( pref.chatWindowWidth > 0 ) nativeWindow.width = pref.chatWindowWidth;
				}
			}
				
			private function creationCompleteHandler():void
			{
				windowShowHandler();
				if( _selectedContact )
				{
					selectedContact = _selectedContact;
				}
			}
			
			public function linkToFeedback():void
			{
				navigateToURL( new URLRequest( "http://treegger.uservoice.com/forums/58288-general" ) );
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" gap="0">

		<s:Group width="100%">
			<s:HGroup paddingTop="4" paddingBottom="4" paddingLeft="8" paddingRight="8" gap="8" left="0">
				<s:Group click="linkToFeedback()" toolTip="{resourceManager.getString('airim','toolTipFeedback')}">
					<s:BitmapImage source="@Embed('icons/feedback.png')" />
				</s:Group>
			</s:HGroup>
			
			<s:HGroup paddingTop="4" paddingBottom="4" paddingLeft="8" paddingRight="8" gap="8" right="0">
				<s:Group click="currentChatPannel.selectFile()" toolTip="{resourceManager.getString('airim','toolTipSendFile')}">
					<s:BitmapImage source="@Embed('icons/folder.png')" />
				</s:Group>
				<s:Group click="openVideoWindow().startStratus()" toolTip="{resourceManager.getString('airim','toolTipVideo')}">
					<s:BitmapImage source="@Embed('icons/video.png')" />
				</s:Group>
			</s:HGroup>
		</s:Group>
		
		<s:Group id="chatPanelStack" width="100%" height="100%">
		</s:Group>		
		
		<component:TabBar id="tabBar" width="100%" gap="0" focusEnabled="false"
						  dataProvider="{activeChatContacts}"
						  selectedIndex="{selectedActiveChatContactIndex}"
						  tabClose="tabCloseHandler( event )"
						  tabClick="tabClickHandler( event )"
						  tabDropText="tabDropTextHandler( event )"
						  />
	</s:VGroup>
	
</s:Window>
