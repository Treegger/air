<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 >
	
	<fx:Script>
		<![CDATA[
			import flash.text.engine.ElementFormat;
			import flash.text.engine.FontDescription;
			import flash.text.engine.FontWeight;
			import flash.text.engine.TextBlock;
			import flash.text.engine.TextElement;
			import flash.text.engine.TextLine;
			
			import mx.formatters.DateFormatter;
			
			import spark.utils.TextFlowUtil;

			private static var textSelection:String;
			private static var highlightedComponent:ChatTextItem;

			public function set text(value:String):void
			{
				value = value.replace( /(http[s]?:\/\/)?([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}(\/[^ ]*)*/g,  
				function( subStr:String, match1:String, match2:String, match3:String, match4:String, index:int, fullString:String ):String
				{
					if( match1 )
					{
						return "<a href='"+subStr+"'>"+subStr+"</a>"
					}
					else
						return "<a href='http://"+subStr+"'>"+subStr+"</a>"	
				});
				
				richText.textFlow = TextFlowUtil.importFromString(value);
			}
			
			private function selectionChangeHandler( event:Event ):void
			{
				var anchorPos:int = richText.selectionAnchorPosition;
				var activePos:int = richText.selectionActivePosition;
				textSelection = richText.text.substring(anchorPos, activePos);
				highlightedComponent = this;
			}
			
			private var startDragging:Boolean = false;
			private function mouseDownHandler(event:Event):void
			{
				if( textSelection &&  highlightedComponent == this )
				{
					startDragging = true;
					event.stopImmediatePropagation();
				}
			}
			private function stopDragging():void
			{
				richText.selectRange( -1, -1 );
				startDragging = false;
			}
			private function mouseMoveHandler(event:Event):void
			{
				if( startDragging && textSelection )
				{
					var transfer:Clipboard = new Clipboard;
					
					transfer.setData( ClipboardFormats.TEXT_FORMAT, textSelection, true); 
					
					var allowedActions:NativeDragOptions = new NativeDragOptions();
					allowedActions.allowCopy = true;
					
					var offset:Point = new Point();
	
					NativeDragManager.doDrag( richText, transfer, getImage( textSelection ), null, allowedActions );					
				}
			}
			
			private function getImage( text:String ):BitmapData
			{
				var image:BitmapData;
				try {

					var fontDesc:FontDescription = new FontDescription("Arial", FontWeight.NORMAL ); 
					var elementFormat:ElementFormat = new ElementFormat(fontDesc, 11, 0x000000 ); 
					var textElement:TextElement = new TextElement(text, elementFormat); 
					var textBlock:TextBlock = new TextBlock(textElement); 
					var textLine:TextLine = textBlock.createTextLine(); 
					var sprite:Sprite = new Sprite();

					textLine.y = Math.round(textLine.height);
					sprite.addChild( textLine ); 
					image = new BitmapData( textLine.width, textLine.height, true, 0x00000000 );
					image.draw( sprite );
				} catch (e:ArgumentError){
					image = null;
				} 
				return image;
			}


			[Bindable]
			public var backgroundColor:uint;
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="df" formatString="JJ:NN"/>
	</fx:Declarations>
	
	<s:Line top="0" width="100%">
		<s:stroke>
			<s:SolidColorStroke color="{backgroundColor}" weight="1"/>
		</s:stroke>
	</s:Line>
	<s:RichEditableText id="richText"
						right="30" left="5" top="4" bottom="2" 
						clipAndEnableScrolling="false"
						multiline="true"
						focusEnabled="false"
						height="{richText.contentHeight}"
						fontSize="11" selectable="true" editable="false"
						mouseDown="mouseDownHandler(event)"
						mouseMove="mouseMoveHandler(event)"
						nativeDragComplete="stopDragging()"
						selectionChange="selectionChangeHandler( event )"
						/>		

	<s:Label right="5" top="4" bottom="2" text="{df.format(new Date())}" color="{backgroundColor}" fontSize="11"/>
	
	
</s:Group>
