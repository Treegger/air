<?xml version="1.0" encoding="utf-8"?>
<s:Window 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:s="library://ns.adobe.com/flex/spark"
	transparent="false"
	systemChrome="standard"
	maximizable="true"
	resizable="true"
	type="normal"
	showStatusBar="false"
	close="closeHandler()"
	height="{cameraHeight}" width="{cameraWidth}"
	title="{contact.name}" xmlns:component="com.treegger.component.*"
	creationComplete="creationCompleteHandler()"
	backgroundColor="0x000000"
>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.treegger.airim.PrivateProperties;
			import com.treegger.airim.controller.ChatController;
			import com.treegger.airim.model.Contact;
			import com.treegger.component.AlphaButton;
			import com.treegger.component.IOStream;
			import com.treegger.component.StratusConnector;
			
			import flash.media.Camera;
			import flash.net.sendToURL;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			

			
			[Inject]
			public var chatController:ChatController;
			
			
			private const cameraWidth:int=320;
			private const cameraHeight:int=240;
			
			
			
			
			private var remoteVideo:Video = new Video();

			[Bindable]
			public var contact:Contact;
			
			private var acceptIncomingVideo:Boolean = false;
			
			
			private var netConnection:NetConnection;
			private var ioStream:IOStream;
			
			private function creationCompleteHandler():void
			{

				
			}

			private function stratusConnect():void
			{
				var stratusConnector:StratusConnector = new StratusConnector();
				stratusConnector.addEventListener( StratusConnector.CONNECTION_SUCCESS, function(event:Event):void
				{
					netConnection = stratusConnector.netConnection;
					chatController.sendTextMessage( contact.jidWithoutRessource, null, "stratus", netConnection.nearID );
					if( contact.stratusId ) handshake( contact.stratusId );
				});
				stratusConnector.addEventListener( StratusConnector.CONNECTION_CLOSE, function(event:Event):void
				{
					netConnection = null;
					acceptIncomingVideo = false;
					if( !closed ) close();
				});				
				stratusConnector.connect();
			}
			
			public function startVideo():void
			{
				acceptIncomingVideo = true;
				stratusConnect();
			}
			public function requestVideo():void
			{
				if( acceptIncomingVideo )
				{
					handshake( contact.stratusId );
				}
				else
				{
					Alert.show( "Video request from "+contact.name, "Accept remote call?", Alert.YES|Alert.NO, this, videoClickHandler );
				}
			}
			
			private function videoClickHandler( event:CloseEvent ):void
			{
				if( event.detail == Alert.YES )
				{
					acceptIncomingVideo = true;
					stratusConnect();
				}
				else 
				{
					close();
				}
			}
			
			private function handshake( stratusId:String ):void
			{
				trace( "Handshake remoteId " + stratusId + " net " + netConnection  );
				if( netConnection && stratusId )
				{
					ioStream = new IOStream();
					ioStream.connect( netConnection, stratusId, "videoStream" );
					
					var st:SoundTransform = new SoundTransform(1);
					ioStream.input.soundTransform = st;
					
					remoteVideo.smoothing = true;
					remoteVideo.attachNetStream( ioStream.input );
					remoteVideoDisplay.addChild( remoteVideo );
					
					
					bindCamera();
					bindMicrophone();
				}
			}

			private function closeHandler():void
			{
				
			}
			
			
			
			private function bindCamera():void
			{
				var camera:Camera = getCamera();
				if( camera )
				{
					if( buttonList.selectedItem == "High" )
					{
						camera.setMode( cameraWidth*2, cameraHeight*2, 25 );
						camera.setQuality( 0, 90 );
					}
					else if( buttonList.selectedItem == "Normal" )
					{
						camera.setMode( cameraWidth, cameraHeight, 15 );
						camera.setQuality( 0, 90 );
					}
					else if( buttonList.selectedItem == "Low" )
					{
						camera.setMode( cameraWidth/2, cameraHeight/2, 10 );
						camera.setQuality( 0, 90 );
					}
					localVideoDisplay.attachCamera(camera);
				}
				
				if( ioStream.output ) ioStream.output.attachCamera(camera);
			}
			
			private var microphone:Microphone;
			private function bindMicrophone():void
			{
				microphone = getMicrophone();
				if( microphone )
				{
					microphone.codec = SoundCodec.SPEEX;
					microphone.framesPerPacket = 1;
					microphone.soundTransform = new SoundTransform(1);
					microphone.setSilenceLevel(0);
					microphone.gain = gainSlider.value;
					if( buttonList.selectedItem == "High" )
					{
						microphone.encodeQuality = 9;
					}
					else if( buttonList.selectedItem == "Normal" )
					{
						microphone.encodeQuality = 7;
					}
					else if( buttonList.selectedItem == "Low" )
					{
						microphone.encodeQuality = 5;
					}
				}
				
				if( ioStream.output ) ioStream.output.attachAudio(microphone);
			}
			
			
			private function getMicrophone():Microphone
			{
				for( var i:int; i<Microphone.names.length; i++ )
				{
					var mic:Microphone = Microphone.getMicrophone( i );
					if( mic ) return mic;
				}
				return null;				
			}
			
			private function getCamera():Camera
			{
				for( var i:int=0; i<Camera.names.length; i++ )
				{
					var camera:Camera = Camera.getCamera( i.toString() );
					if( camera ) return camera;
				}
				return null;
			}
			
			private function qualityChangeHandler():void
			{
				bindCamera();
				bindMicrophone();
			}
			
			private function toggleFullscreen():void
			{
				if( nativeWindow.stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE )
				{
					nativeWindow.stage.displayState = StageDisplayState.NORMAL;
				}
				else
				{
					nativeWindow.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}
			}
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<mx:VideoDisplay id="remoteVideoDisplay" height="100%" width="{remoteVideoDisplay.height*4/3}" horizontalCenter="0" 
						 resize="remoteVideo.width=remoteVideoDisplay.width; remoteVideo.height=remoteVideoDisplay.height"/>
		<mx:VideoDisplay id="localVideoDisplay" height="25%" width="25%" right="0" bottom="0"/>		
		
		<component:AlphaButton id="fullscreenButton" data="Fullscreen" top="1" click="toggleFullscreen()"/>
		
		<s:VGroup right="0" top="0" horizontalAlign="right">
			<s:List id="buttonList"
					allowMultipleSelection="false"
					dragEnabled="false"
					dragMoveEnabled="false"
					dropEnabled="false"
					borderVisible="true"
					contentBackgroundAlpha="0"
					itemRenderer="com.treegger.component.AlphaButton"
					
					selectedItem="Normal"
					change="qualityChangeHandler()"
					>
				<s:layout>
					<s:HorizontalLayout  horizontalAlign="left" gap="1" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"/>
				</s:layout>
				<s:dataProvider>
					<s:ArrayCollection source="[ 'Low', 'Normal', 'High' ]" />
				</s:dataProvider>
			</s:List>
	
			<s:HGroup gap="2" verticalAlign="middle" paddingRight="5">
				<s:Label text="Mic" color="0xffffff" alpha=".5" fontSize="10"/>
				<s:HSlider id="gainSlider" alpha=".5" minimum="0" maximum="100" value="50" stepSize="5" snapInterval="5" liveDragging="true" showDataTip="false"
						   lineHeight="1" lineThrough="false" maxWidth="50"
						   change="if( microphone ) microphone.gain = gainSlider.value"/>
			</s:HGroup>

		</s:VGroup>
			
	</s:Group>
</s:Window>
