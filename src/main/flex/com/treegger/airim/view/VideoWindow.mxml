<?xml version="1.0" encoding="utf-8"?>
<s:Window 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:s="library://ns.adobe.com/flex/spark"
	transparent="false"
	systemChrome="standard"
	maximizable="true"
	resizable="true"
	type="normal"
	showStatusBar="false"
	close="hangup()"
	height="{cameraHeight}" width="{cameraWidth}"
	title="{contact.name}" xmlns:component="com.treegger.component.*"
	creationComplete="creationCompleteHandler()"
>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.treegger.airim.PrivateProperties;
			import com.treegger.airim.controller.ChatController;
			import com.treegger.airim.controller.Contact;
			import com.treegger.component.AlphaButton;
			
			import flash.media.Camera;
			import flash.net.sendToURL;
			
			import mx.binding.utils.BindingUtils;
			
			private var connectUrl:String = "rtmfp://stratus.rtmfp.net";
			private const developerKey:String = PrivateProperties.STRATUS_DEVELOPER_KEY;
			
			[Inject]
			public var chatController:ChatController;
			
			private const cameraWidth:int=320;
			private const cameraHeight:int=240;
			
			
			
			// this is the connection to rtmfp server
			private var netConnection:NetConnection;
			// outgoing media stream (audio, video, text and some control messages)
			private var outgoingStream:NetStream;
			// incoming media stream (audio, video, text and some control messages)
			private var incomingStream:NetStream;
			
			private var remoteVideo:Video = new Video();

			[Bindable]
			public var contact:Contact;
			
			private var connected:Boolean = false;
			
			private function creationCompleteHandler():void
			{
				connect();
				BindingUtils.bindSetter( handshake, contact, "stratusId", false, true );
				
			}
			
			private function connect():void
			{
				trace( "Connecting" );
				if(  !netConnection  )
				{
					netConnection = new NetConnection();
					netConnection.addEventListener( NetStatusEvent.NET_STATUS, netConnectionHandler);
					
					try
					{
						netConnection.connect( connectUrl + "/" + developerKey );
					}
					catch (e:ArgumentError)
					{
						trace( e );
						return;
					}
				}
			}
			private function netConnectionHandler(event:NetStatusEvent):void
			{
				trace("NetConnection event: " + event.info.code + "\n");
				
				switch (event.info.code)
				{
					case "NetConnection.Connect.Success":
						connectSuccess();
						break;
					
					case "NetStream.Connect.Closed":
						hangup();
						break;
				}
			}
			private function connectSuccess():void
			{
				connected = true;
				trace("Connected, my ID: " + netConnection.nearID + "\n");
				chatController.sendTextMessage( contact.jid, null, "stratus", netConnection.nearID );
				handshake( contact.stratusId );
			}
			

			private var previousStratusId:String;
			private function handshake( stratusId:String ):void
			{
				trace( "Handshake " + stratusId );
				
				if( previousStratusId != stratusId  )
				{
					if( connected && stratusId )
					{
						previousStratusId = stratusId;
						trace( "Handshaking " + stratusId );		
						incomingStream = new NetStream(netConnection, stratusId );
						incomingStream.addEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);
						incomingStream.play("media-caller");
		
						// caller publishes media stream
						outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
						outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler );
						outgoingStream.publish("media-caller");
		
						// set volume for incoming stream
						var st:SoundTransform = new SoundTransform(1);
						incomingStream.soundTransform = st;
						
						//incomingStream.receiveAudio(false);
						//incomingStream.receiveVideo(false);
						
						remoteVideo.smoothing = true;
						remoteVideo.attachNetStream(incomingStream);
						remoteVideoDisplay.addChild(remoteVideo);
		
						bindCamera();
						bindMicrophone();
					}
				}
			}

			
			private function bindCamera():void
			{
				var camera:Camera = getCamera();
				if( camera )
				{
					if( buttonList.selectedItem == "High" )
					{
						camera.setMode( cameraWidth*2, cameraHeight*2, 25 );
						camera.setQuality( 0, 90 );
					}
					else if( buttonList.selectedItem == "Normal" )
					{
						camera.setMode( cameraWidth, cameraHeight, 15 );
						camera.setQuality( 0, 90 );
					}
					else if( buttonList.selectedItem == "Low" )
					{
						camera.setMode( cameraWidth/2, cameraHeight/2, 10 );
						camera.setQuality( 0, 90 );
					}
					localVideoDisplay.attachCamera(camera);
				}
				
				//outgoingStream.attachAudio(mic);
				if( outgoingStream )
				{
					outgoingStream.attachCamera(camera);
				}
			}
			private function bindMicrophone():void
			{
				var microphone:Microphone = getMicrophone();
				if( microphone )
				{
					microphone.codec = SoundCodec.SPEEX;
					microphone.framesPerPacket = 1;
					microphone.soundTransform = new SoundTransform(1);
					microphone.setSilenceLevel(0);
					if( buttonList.selectedItem == "High" )
					{
						microphone.encodeQuality = 9;
					}
					else if( buttonList.selectedItem == "Normal" )
					{
						microphone.encodeQuality = 7;
					}
					else if( buttonList.selectedItem == "Low" )
					{
						microphone.encodeQuality = 5;
					}
				}
				
				//outgoingStream.attachAudio(mic);
				if( outgoingStream )
				{
					outgoingStream.attachAudio(microphone);
				}
			}
			
			private function hangup():void
			{
				trace("Hanging up call");

				
				if (incomingStream)
				{
					incomingStream.close();
					incomingStream.removeEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);
				}
				
				if (outgoingStream)
				{
					outgoingStream.close();
					outgoingStream.removeEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);
				}

				incomingStream = null;
				outgoingStream = null;
				
			}
			
			private function outgoingStreamHandler(event:NetStatusEvent):void
			{
				trace("Outgoing stream event: " + event.info.code + "\n");
				switch (event.info.code)
				{
					case "NetStream.Play.Start":
						break;
				}
			}
			
			private function incomingStreamHandler(event:NetStatusEvent):void
			{
				trace("Incoming stream event: " + event.info.code + "\n");
				switch (event.info.code)
				{
					case "NetStream.Play.UnpublishNotify":
						hangup();
						break;
				}
			}
			
			private function getMicrophone():Microphone
			{
				for( var i:int; i<Microphone.names.length; i++ )
				{
					var mic:Microphone = Microphone.getMicrophone( i );
					if( mic ) return mic;
				}
				return null;				
			}
			
			private function getCamera():Camera
			{
				for( var i:int=0; i<Camera.names.length; i++ )
				{
					var camera:Camera = Camera.getCamera( i.toString() );
					if( camera ) return camera;
				}
				return null;
			}
			
			private function qualityChangeHandler():void
			{
				bindCamera();
				bindMicrophone();
			}
			
			private function toggleFullscreen():void
			{
				if( nativeWindow.stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE )
				{
					nativeWindow.stage.displayState = StageDisplayState.NORMAL;
				}
				else
				{
					nativeWindow.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}
			}
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<mx:VideoDisplay id="remoteVideoDisplay" height="100%" width="100%" maintainAspectRatio="true" resize="remoteVideo.width=remoteVideoDisplay.width; remoteVideo.height=remoteVideoDisplay.height"/>
		<mx:VideoDisplay id="localVideoDisplay" height="25%" width="25%" maintainAspectRatio="true" right="0" bottom="0"/>		
			
		<component:AlphaButton id="fullscreenButton" data="Fullscreen" top="1" click="toggleFullscreen()"/>
		
		<s:List id="buttonList"
				allowMultipleSelection="false"
				dragEnabled="false"
				dragMoveEnabled="false"
				dropEnabled="false"
				borderVisible="true"
				contentBackgroundAlpha="0"
				itemRenderer="com.treegger.component.AlphaButton"
				right="0"
				selectedItem="Normal"
				change="qualityChangeHandler()"
				>
			<s:layout>
				<s:HorizontalLayout  horizontalAlign="left" gap="1" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"/>
			</s:layout>
			<s:dataProvider>
				<s:ArrayCollection source="[ 'Low', 'Normal', 'High' ]" />
			</s:dataProvider>
		</s:List>
			
	</s:Group>
</s:Window>
