<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication 
   	xmlns:s="library://ns.adobe.com/flex/spark"
   	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:swiz="http://swiz.swizframework.org"
	xmlns:view="com.treegger.airim.view.*"
	xmlns:local="*"
	
	creationComplete="creationCompleteHandler(event)" 
	backgroundAlpha="0"
	showStatusBar="false"
	useNativeDragManager="true"  
	autoExit="true"
	
>
	<fx:Script>
	<![CDATA[
		import air.update.ApplicationUpdaterUI;
		import air.update.events.UpdateEvent;
		
		import com.treegger.airim.controller.ChatController;
		import com.treegger.airim.controller.PreferencesController;
		import com.treegger.airim.view.PreferencesWindow;
		import com.treegger.component.Notification;
		
		import flash.events.ErrorEvent;
		import flash.text.engine.ElementFormat;
		import flash.text.engine.FontDescription;
		import flash.text.engine.TextBlock;
		import flash.text.engine.TextElement;
		import flash.text.engine.TextLine;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		
		import org.swizframework.core.SwizManager;
		
		import spark.filters.BevelFilter;
		import spark.filters.DropShadowFilter;
		
		
		[Embed(source="icons/logo-128x128.png")]
		[Bindable]
		private var ApplicationLogo:Class;     
		
		private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
	
		
		private function creationCompleteHandler( event:Event ):void
		{
			notifyDockIcon();
			

			var preferencesController:PreferencesController = new PreferencesController();
			if( !preferencesController.userAccount )
			{
				openPreferencesWindow();
			}
						
			
			this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
			
			
			var shadowFilter:DropShadowFilter = new DropShadowFilter();
			shadowFilter.color = 0x000000;
			shadowFilter.alpha = 0.2;
			shadowFilter.blurX = 10;
			shadowFilter.blurY = 10;
			shadowFilter.distance = 5;
			filters = [shadowFilter];

			// Active / Inactive app 
			nativeApplication.addEventListener(Event.ACTIVATE, onApplicationActivate); 
			nativeApplication.addEventListener(Event.DEACTIVATE, onApplicationDeactivate);
			
			
			nativeApplication.autoExit = false;
			if( NativeApplication.supportsDockIcon )
			{
				nativeApplication.addEventListener( InvokeEvent.INVOKE, onShowWindow );				
			}
			else if( NativeApplication.supportsSystemTrayIcon )
			{
				SystemTrayIcon( NativeApplication.nativeApplication.icon ).addEventListener( ScreenMouseEvent.CLICK, onShowWindow );
			}
			
			
			//NativeApplication.nativeApplication.idleThreshold = 2 * 60; // In seconds -- the default is 5 minutes.
			NativeApplication.nativeApplication.addEventListener(Event.USER_IDLE, onUserIdle);
			NativeApplication.nativeApplication.addEventListener(Event.USER_PRESENT, onUserPresent); 
		
			createMenu();
			
			
			//checkForUpdate();
		}

		private function createMenu():void
		{
			var airIMmenu:NativeMenu = new NativeMenu();
			
			const preferenceMenuItem:NativeMenuItem = new NativeMenuItem("Preferences...");
			preferenceMenuItem.addEventListener(Event.SELECT, preferencesSelectedHandler );
			airIMmenu.addItem( preferenceMenuItem ) ;
			
			
			
			
			airIMmenu.addItem(new NativeMenuItem( "", true ) );
			const quitMenuItem:NativeMenuItem = airIMmenu.addItem(new NativeMenuItem("Quit AirIM"));
			quitMenuItem.keyEquivalent = "q";
			quitMenuItem.addEventListener(Event.SELECT, quitApplicationHandler );
			contextMenu = airIMmenu;
			
			if( NativeApplication.supportsMenu )
			{
				const mainMenu:NativeMenuItem = NativeApplication.nativeApplication.menu.getItemAt(0);
				const preferenceMenuItem2:NativeMenuItem = new NativeMenuItem("Preferences...");
				preferenceMenuItem2.addEventListener(Event.SELECT, preferencesSelectedHandler );
				mainMenu.submenu.addItemAt( preferenceMenuItem2, 2 );
				mainMenu.submenu.items[mainMenu.submenu.items.length-1].addEventListener( Event.SELECT, teardown )
				// = mainMenu;
			}
			
		}
		
		private function preferencesSelectedHandler( event:Event ):void
		{
			openPreferencesWindow();
		}

		private function openPreferencesWindow():void
		{
			const window:PreferencesWindow = new PreferencesWindow() ;
			SwizManager.setUp(window);
			window.open(true);
		}
		
		private function teardown( event:Event = null ):void
		{
			swizBean.chatController.sendPresence( "unavailable" );
			swizBean.chatController.close();			
		}
		
		private function quitApplicationHandler( event:Event = null ):void
		{
			trace( "Quit" );
			for each( var win:NativeWindow in NativeApplication.nativeApplication.openedWindows ) 
			{
				win.dispatchEvent( new Event( Event.CLOSING, false, true ) );
				win.close();
			}
			teardown();
			exit();
		}
		
		private function notifyDockIcon():void
		{
			if( NativeApplication.supportsDockIcon )
			{
				
				var unseenCount:uint = 10// Function for counting the number of unread messages. 
				var unreadCountSprite:Sprite = new Sprite(); 
				unreadCountSprite.width = 128; 
				unreadCountSprite.height = 128; 
				unreadCountSprite.x = 0; 
				unreadCountSprite.y = 0; 
				var padding:uint = 16; 
				// Use FTE APIs to get the best looking text. 
				var fontDesc:FontDescription = new FontDescription("Arial", "bold"); 
				var elementFormat:ElementFormat = new ElementFormat(fontDesc, 26, 0xFFFFFF); 
				var textElement:TextElement = new TextElement(String(unseenCount), elementFormat); 
				var textBlock:TextBlock = new TextBlock(textElement); 
				var textLine:TextLine = textBlock.createTextLine(); 
				
				var diameter:uint = padding;
				if( textLine.textWidth < textLine.textHeight ) diameter += textLine.textHeight;  
				else diameter += textLine.textWidth;
				
				textLine.x = 128 - diameter/2 - textLine.textWidth/2 - 4; 
				textLine.y = diameter/2 + textLine.textHeight/2 - 3;
				
				
				unreadCountSprite.graphics.beginFill(0xE92200); 
				unreadCountSprite.graphics.drawEllipse( 128 - diameter - 4, 0, diameter, diameter); 
				unreadCountSprite.graphics.endFill(); 
				unreadCountSprite.addChild(textLine); 
				var shadow:DropShadowFilter = new DropShadowFilter(3, 45, 0, .75); 
				var bevel:BevelFilter = new BevelFilter(1); 
				unreadCountSprite.filters = [shadow.clone(),bevel.clone()];
				
				var unreadCountData:BitmapData = new BitmapData(128, 128, true, 0x00000000);  
				// The Dynamic128IconClass referenced below is embedded. 
				var appData:BitmapData = (new ApplicationLogo).bitmapData;  
				unreadCountData.draw( appData );
				unreadCountData.draw( unreadCountSprite );
				var appIcon:Bitmap = new Bitmap(unreadCountData); 
				// If you do want to change the system tray icon on Windows, as well, add a 16x16 icon to the array below. 
				InteractiveIcon(NativeApplication.nativeApplication.icon).bitmaps = [appIcon];
				
				var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;
				dock.bounce(NotificationType.INFORMATIONAL);
			}
			
			var screen:Screen = Screen.mainScreen;
			
			var notif:Notification = new Notification("None of your friend are online");
			notif.bounds = new Rectangle(screen.visibleBounds.width - notif.width - 2, screen.visibleBounds.y + 2, notif.width, notif.height );
			notif.alwaysInFront = true;
			notif.visible = true;

		}
		
		private function onUserIdle(e:Event):void 
		{ 
			// No keyboard or mouse input for n minutes. 
			swizBean.chatController.sendPresence( null, "away" );

		}
		private function onUserPresent(e:Event):void 
		{
			// The user is back!
			swizBean.chatController.sendPresence();
		}
		
		private function onShowWindow(e:Event):void 
		{
			if( !nativeWindow.closed ) nativeWindow.activate(); 
		}
		
		private function onApplicationActivate(e:Event):void 
		{
			stage.frameRate = 24; 
		}  
		private function onApplicationDeactivate(e:Event):void 
		{
			stage.frameRate = 10; 
		}
		
		private function onMouseDown(evt:MouseEvent):void
		{
			if( !nativeWindow.closed ) stage.nativeWindow.startMove();
		}
		
		
		private function checkForUpdate():void {
			setApplicationVersion(); // Find the current version so we can show it below			
			appUpdater.updateURL = "http://ws.treegger.com/air/update.xml"; // Server-side XML file describing update
			appUpdater.isCheckForUpdateVisible = false; // We won't ask permission to check for an update
			appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate); // Once initialized, run onUpdate
			appUpdater.addEventListener(ErrorEvent.ERROR, onError); // If something goes wrong, run onError
			appUpdater.initialize(); // Initialize the update framework
		}
	
		private function onError(event:ErrorEvent):void {
			Alert.show(event.toString());
		}
		
		private function onUpdate(event:UpdateEvent):void {
			appUpdater.checkNow(); // Go check for an update now
		}
	
		// Find the current version for our Label below
		private function setApplicationVersion():void {
			var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
			var ns:Namespace = appXML.namespace();
			//ver.text = "Current version is " + appXML.ns::version;
		}
		
	]]>
	</fx:Script>
	
	<fx:Style source="css/AirIM.css" />
	
	<fx:Declarations>
		<swiz:Swiz>
			<swiz:beanProviders>
				<local:Beans id="swizBean"/>
			</swiz:beanProviders>
			
			<swiz:config>
				<swiz:SwizConfig
					setUpEventType="{ Event.ADDED_TO_STAGE }" 
					setUpEventPhase="{ EventPhase.CAPTURING_PHASE }" 
					setUpEventPriority="50"
					tearDownEventType="{ Event.REMOVED_FROM_STAGE }" 
					tearDownEventPhase="{ EventPhase.CAPTURING_PHASE }" 
					tearDownEventPriority="50"

					viewPackages="com.treegger.airim.view"
					
					defaultDispatcher="global" />
			</swiz:config>
		</swiz:Swiz>
	</fx:Declarations>

	
	<view:RosterView id="rosterView" resize="height = rosterView.height+4; width = rosterView.width+100;" />
	
</s:WindowedApplication>
